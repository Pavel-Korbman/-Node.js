// üí° –†–µ–∞–ª–∏–∑–∞—Ü–∏—è API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å—è–º–∏
/*
const express = require('express');
const Joi = require('joi');
const app = express();
app.use(express.json());

const articles = [];
let uniqueID = 0;

// –†–æ—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π:
app.get('/articles', (req, res) => {
    res.send({ articles });
});

// –†–æ—É—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏:
app.post('/articles', (req, res) => {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
    if (!req.body.title) {
        return res.status(400).send({error: 'Invalid title'});
    }
    if (!req.body.content) {
        return res.status(400).send({error: 'Invalid content'});
    }
    if (req.body.content.length <=5) {
        return res.status(400).send({error: '–°—Ç–∞—Ç—å—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª—å—à–µ 5 —Å–∏–º–≤–æ–ª–æ–≤'});
    }
    
    
    uniqueID += 1;

    articles.push({
        id: uniqueID,
        ...req.body
    });

    res.send({ id: uniqueID, });
});

// –†–æ—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É ID:
app.get('/articles/:id', (req, res) => {
    const article = articles.find((article) => article.id === Number(req.params.id));

    if (article) {
        res.send({ article });
    } else {
        res.status(404);
        res.send({ article: null });
    }
});

// –†–æ—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏:
app.put('/articles/:id', (req, res) => {
    const article = articles.find((article) => article.id === Number(req.params.id));

    if (article) {
        article.title = req.body.title;
        article.content = req.body.content;
        res.send({ article });
    } else {
        res.status(404);
        res.send({ article: null });
    }
});

// –†–æ—É—Ç —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏:
app.delete('/articles/:id', (req, res) => {
    const article = articles.find((article) => article.id === Number(req.params.id));

    if (article) {
        const articleIndex = articles.indexOf(article);
        articles.splice(articleIndex, 1);
        res.send({ article });
    } else {
        res.status(404);
        res.send({ article: null });
    }
});

app.listen(3000);
*/

// –í–∞–ª–∏–¥–∞—Ç–æ—Ä Joi

// const Joi = require('joi');

// const schema = Joi.object({
//     id: Joi.number().required(),
//     title: Joi.string().min(1).required(),
//     content: Joi.string().min(5).required()
// });

// const res = schema.validate({
//     id: 1,
//     title: '–ó–∞–≥–æ–ª–æ–≤–æ–∫',
//     content: '22'
// });

// console.log(res.error.details);
// // [
// //     {
// //       message: '"content" length must be at least 5 characters long',
// //       path: [ 'content' ],
// //       type: 'string.min',
// //       context: {
// //         limit: 5,
// //         value: '22',
// //         encoding: undefined,
// //         label: 'content',
// //         key: 'content'
// //       }
// //     }
// //   ]


// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è API c –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π Joi

/*
const express = require('express');
const Joi = require('joi');
const app = express();

app.use(express.json());

const idSchema = Joi.object({  // –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ID
    id: Joi.number().required()
});

const articleSchema = Joi.object({  // –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏
    title: Joi.string().required(),
    content: Joi.string().min(5).required(),
});

const articles = []; // —Ö—Ä–∞–Ω–∏–º —Å—Ç–∞—Ç—å–∏ –≤ –º–∞—Å—Å–∏–≤–µ (–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—á–∏—Ç—ã–≤–∞—Ç—å –µ–≥–æ –∏–∑ —Ñ–∞–π–ª–∞)
let uniqueID = 0;

app.get('/articles', (req, res) => {
    res.send({ articles });
});

app.post('/articles', (req, res) => {
    
    const articleValidation = articleSchema.validate(req.body);
    if(articleValidation.error) {
        return res.status(400).send(articleValidation.error.details);
    }    
    
    uniqueID += 1;

    articles.push({
        id: uniqueID,
        ...req.body
    });

    res.send({ id: uniqueID, });
});

app.get('/articles/:id', (req, res) => {
    const idValidation = idSchema.validate(req.params);
    if(idValidation.error) {
        return res.status(400).send(idValidation.error.details);
    }

    const article = articles.find((article) => article.id === Number(req.params.id));

    if (article) {
        res.send({ article });
    } else {
        res.status(404);
        res.send({ article: null });
    }
});


app.put('/articles/:id', (req, res) => {
    const idValidation = idSchema.validate(req.params);
    if(idValidation.error) {
        return res.status(400).send(idValidation.error.details);
    }

    const articleValidation = articleSchema.validate(req.body);
    if(articleValidation.error) {
        return res.status(400).send(articleValidation.error.details);
    }
    
    const article = articles.find((article) => article.id === Number(req.params.id));

    if (article) {
        article.title = req.body.title;
        article.content = req.body.content;
        res.send({ article });
    } else {
        res.status(404);
        res.send({ article: null });
    }
});

app.delete('/articles/:id', (req, res) => {
    const idValidation = idSchema.validate(req.params);
    if(idValidation.error) {
        return res.status(400).send(idValidation.error.details);
    }
    
    const article = articles.find((article) => article.id === Number(req.params.id));

    if (article) {
        const articleIndex = articles.indexOf(article);
        articles.splice(articleIndex, 1);
        res.send({ article });
    } else {
        res.status(404);
        res.send({ article: null });
    }
});

app.listen(3000);
*/




// –†–ï–§–ê–ö–¢–û–†–ò–ù–ì –ö–û–î–ê –†–µ–∞–ª–∏–∑–∞—Ü–∏—è API c –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π Joi 

const express = require('express');

/**
 * –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ :
 */
const { checkParams, checkBody } = require('./validation/validator');

/**
 * –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ö–µ–º—ã (–¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ID –∏ —Å—Ç–∞—Ç—å–∏) –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ Joi :
 */
const { idSchema, articleSchema } = require('./validation/schema');

const app = express();

app.use(express.json());

const articles = []; // —Ö—Ä–∞–Ω–∏–º —Å—Ç–∞—Ç—å–∏ –≤ –º–∞—Å—Å–∏–≤–µ (–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—á–∏—Ç—ã–≤–∞—Ç—å –µ–≥–æ –∏–∑ —Ñ–∞–π–ª–∞)
let uniqueID = 0; // –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID –Ω–æ–≤–æ–π —Å—Ç–∞—Ç—å–∏

/**
 * –†–æ—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π:
 */
app.get('/articles', (req, res) => {
    res.send({ articles });
});

/**
 * –†–æ—É—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏:
 */
app.post('/articles', checkBody(articleSchema), (req, res) => {
    uniqueID += 1;

    articles.push({
        id: uniqueID,
        ...req.body
    });

    res.send({ id: uniqueID, });
});

/**
 * –†–æ—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏ –ø–æ ID:
 */
app.get('/articles/:id', checkParams(idSchema), (req, res) => {

    const article = articles.find((article) => article.id === Number(req.params.id));

    if (article) {
        res.send({ article });
    } else {
        res.status(404);
        res.send({ article: null });
    }
});

/**
 * –†–æ—É—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏:
 */
app.put('/articles/:id', checkParams(idSchema), checkBody(articleSchema), (req, res) => {

    const article = articles.find((article) => article.id === Number(req.params.id));

    if (article) {
        article.title = req.body.title;
        article.content = req.body.content;
        res.send({ article });
    } else {
        res.status(404);
        res.send({ article: null });
    }
});

/**
 * –†–æ—É—Ç —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏:
 */
app.delete('/articles/:id', checkParams(idSchema), (req, res) => {

    const article = articles.find((article) => article.id === Number(req.params.id));

    if (article) {
        const articleIndex = articles.indexOf(article);
        articles.splice(articleIndex, 1);
        res.send({ article });
    } else {
        res.status(404);
        res.send({ article: null });
    }
});

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö URL:
 */
app.use((req, res) => {
    res.status(404).send({
        message: 'URL not found!'
    })
});

app.listen(3000);